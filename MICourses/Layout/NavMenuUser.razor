@using MICourses.Services
@inject CurrentUserService CurrentUserService
@inject NavigationManager NavigationManager


<link href="css/site.css" rel="stylesheet">

<nav class="navbar">
    <div class="navbar-brand">
        <span class="brand-text">MI</span>
    </div>

    <div class="navbar-buttons">
        <a href="/" class="catalog-button">Каталог</a>
        <a href="/training" class="training-button">Мое обучение</a>
    </div>

    <div class="dropdown">
        @if (CurrentUserService.IsAuthenticated())
        {
            <span class="login-text">@CurrentUserService.GetCurrentUser()?.Login</span>
            <button class="dropdown-arrow">&#9662;</button>
            <div class="dropdown-menu">
                <a href="/profile">Профиль</a>
                <a @onclick="Logout">Выход</a>
            </div>
        }
        else
        {
            <a href="/authorization" class="login-button">Вход</a>
        }
    </div>
</nav>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const dropdown = document.querySelector(".dropdown");
        const arrow = dropdown.querySelector(".dropdown-arrow");
        const menu = dropdown.querySelector(".dropdown-menu");

        dropdown.addEventListener("click", () => {
            dropdown.classList.toggle("active");
        });

        document.addEventListener("click", (e) => {
            if (!dropdown.contains(e.target)) {
                dropdown.classList.remove("active");
            }
        });
    });
</script>

@code {
    private void Logout()
    {
        CurrentUserService.Logout();
        NavigationManager.NavigateTo("/authorization");
    }
}
