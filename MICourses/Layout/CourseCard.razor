<div class="course-card" style="background-color: white; border-radius: 10px; padding: 20px; border: 1px solid #ddd; display: flex; flex-direction: column; justify-content: space-between;">
    <div class="tags" style="font-size: 12px; background-color: #EEE9F6; padding: 6px 10px; border-radius: 5px; width: 95%; font-weight: bold; margin-bottom: 10px;">
        @Course.Language • @(Course.ForBeginners ? "Продвинутый" : "Для начинающих")
    </div>

    <h3 style="font-size: 20px; font-weight: bold; margin-top: 10px;">@Course.Name</h3>

    <p style="margin: 10px 0 30px; font-size: 14px;">@Course.Description</p>

    <div class="button-container" style="display: flex; justify-content: space-between; align-items: center; margin-top: auto; gap: 10px;">
        <!-- Срок обучения -->
        <div class="study-period" style="font-size: 10px; background-color: #EEE9F6; padding: 6px 12px; border-radius: 5px; flex: 1; font-weight: bold;">
            Срок обучения:<br>
            @Course.StudyPeriod
        </div>

        <!-- Прогресс (если включен) -->
        @if (ShowProgress)
        {
            <div class="progress" style="font-size: 12px; background-color: #EEE9F6; padding: 6px 12px; border-radius: 5px; flex: 1; font-weight: bold;">
                Прогресс:<br>
                @Progress%
            </div>
        }

        <!-- Кнопка "Записаться" (если включена) -->
        @if (ShowEnrollButton)
        {
            <button class="enroll-button" style="font-size: 10px; background-color: #CCBDDE; padding: 12px 12px; border-radius: 5px; flex: 1; font-weight: bold; text-align: center; border: none; cursor: pointer; color: black;"
                    @onclick="EnrollUser"
                    onmouseover="this.style.backgroundColor='#EEE9F6'"
                    onmouseout="this.style.backgroundColor='#CCBDDE'">
                Записаться
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public Course Course { get; set; }

    [Parameter]
    public int Progress { get; set; }

    [Parameter]
    public bool ShowProgress { get; set; } = false;

    [Parameter]
    public bool ShowEnrollButton { get; set; } = true;

    [Inject]
    private CurrentUserService CurrentUserService { get; set; }

    [Inject]
    private MIContext DbContext { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private async Task EnrollUser()
    {
        var currentUser = CurrentUserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/authorization");
            return;
        }

        var existingEnrollment = await DbContext.Users_Courses
            .FirstOrDefaultAsync(uc => uc.ID_User == currentUser.ID_User && uc.ID_Course == Course.ID_Course);

        if (existingEnrollment != null)
        {
            Console.WriteLine("Пользователь уже записан на этот курс");
            return;
        }

        var userCourse = new Users_Course
            {
                ID_User = currentUser.ID_User,
                ID_Course = Course.ID_Course,
                Status = false,
                Author = false
            };

        DbContext.Users_Courses.Add(userCourse);
        await DbContext.SaveChangesAsync();

        Console.WriteLine("Пользователь успешно записан на курс");
    }
}