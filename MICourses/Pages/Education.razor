@page "/education"
@inject MIContext DbContext
@inject CurrentUserService CurrentUserService
@inject NavigationManager NavigationManager

<link href="css/site.css" rel="stylesheet">

<div style="display: grid; grid-template-columns: 200px 1fr; gap: 20px; padding-top: 150px; width: calc(100% - 400px); margin: 0 auto;">
    <div style="background: #FAF6FF; border-radius: 10px; padding: 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); display: flex; flex-direction: column; align-items: center; min-height: 270px; max-height: 270px;">
        <div style="background: #FFFFFF; border-radius: 10px; padding: 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.05); display: flex; flex-direction: column; gap: 20px; width: 100%; max-width: 160px; align-items: flex-start;">
            <a href="/education" class="custom-button">
                <span class="iconify" data-icon="mdi:school-outline" style="font-size: 24px; vertical-align: middle;"></span>
                <span style="font-family: Arial, sans-serif; font-size: 14px;">Обучение</span>
            </a>
            <hr style="border: 1px solid #E0E0E0; width: 100%; margin: 0;" />
            <a href="/homework" class="customs-button">
                <span class="iconify" data-icon="mdi:clipboard-check-outline" style="font-size: 24px; vertical-align: middle;"></span>
                <span style="font-family: Arial, sans-serif; font-size: 14px;">Задания</span>
            </a>
            <hr style="border: 1px solid #E0E0E0; width: 100%; margin: 0;" />
            <a href="/achievements" class="customs-button">
                <span class="iconify" data-icon="mdi:trophy-outline" style="font-size: 24px; vertical-align: middle;"></span>
                <span style="font-family: Arial, sans-serif; font-size: 14px;">Достижения</span>
            </a>
        </div>
    </div>

    <div style="display: flex; flex-direction: column; gap: 20px; width: 100%;">
        <div style="background: #FAF6FF; border-radius: 10px; padding: 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); display: flex; flex-direction: column; gap: 20px;">
            <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                <button @onclick="ShowInProgressCourses" style="background: #FFFFFF; border: 1px solid #CCCCCC; border-radius: 20px; padding: 10px 20px; font-family: Arial, sans-serif; font-size: 14px; cursor: pointer;">
                    В процессе
                </button>
                <button @onclick="ShowCompletedCourses" style="background: #FFFFFF; border: 1px solid #CCCCCC; border-radius: 20px; padding: 10px 20px; font-family: Arial, sans-serif; font-size: 14px; cursor: pointer;">
                    Пройденные
                </button>
            </div>

            <div style="display: flex; flex-direction: column; gap: 10px;">
                @if (FilteredCourses == null || !FilteredCourses.Any())
                {
                        <div>Нет курсов для отображения.</div>
                }
                else
                {
                    foreach (var userCourse in FilteredCourses)
                    {
                                <div style="display: flex; align-items: center; justify-content: space-between; background: white; border-radius: 10px; padding: 10px 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.05);">
                                    <span style="font-family: Arial, sans-serif; font-size: 16px; font-weight: bold;">
                                        Курс: @userCourse.ID_CourseNavigation.Name
                                    </span>
                                    <div style="display: flex; gap: 10px;">
                                        <button @onclick="() => SelectCourse(userCourse)" style="background: #D1C4E9; border: none; border-radius: 20px; padding: 5px 15px; font-family: Arial, sans-serif; font-size: 14px; cursor: pointer; color: white;">
                                            Выбрать
                                        </button>
                                    </div>
                                </div>
                    }
                }
            </div>
        </div>

        @if (SelectedCourse != null)
        {
                <div style="background: #FAF6FF; border-radius: 10px; padding: 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); display: flex; flex-direction: column; gap: 20px;">
                    <div style="display: flex; flex-direction: column; gap: 10px;">
                    @if (FilteredLessons == null || !FilteredLessons.Any())
                    {
                                <div>Нет уроков для отображения.</div>
                    }
                    else
                    {
                        foreach (var userLesson in FilteredLessons.OrderBy(l => l.ID_LessonNavigation.ID_Lesson))
                        {
                                        <div style="display: flex; align-items: center; justify-content: space-between; background: white; border-radius: 10px; padding: 10px 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.05);">
                                            <span style="font-family: Arial, sans-serif; font-size: 16px; font-weight: bold;">
                                                Урок @userLesson.ID_LessonNavigation.Name
                                            </span>
                                            <div style="display: flex; gap: 10px;">
                                                <button @onclick="() => NavigateToLesson(userLesson.ID_LessonNavigation.ID_Lesson)" 
                                                        style="background: #D1C4E9; border: none; border-radius: 20px; padding: 5px 15px; font-family: Arial, sans-serif; font-size: 14px; cursor: pointer; color: white;">
                                                    Перейти
                                                </button>
                                            </div>
                                        </div>
                        }
                    }
                    </div>
                </div>
        }
    </div>
</div>

@code {
    private List<Users_Course> Courses;
    private List<Users_Course> FilteredCourses;
    private Users_Course SelectedCourse;

    private List<Users_Lesson> Lessons;
    private List<Users_Lesson> FilteredLessons;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = CurrentUserService.GetCurrentUser();
        if (currentUser != null)
        {
            Courses = await DbContext.Users_Courses
                .Include(uc => uc.ID_CourseNavigation)
                .Where(uc => uc.ID_User == currentUser.ID_User)
                .ToListAsync();
            FilteredCourses = Courses;
        }
        else
        {
            Courses = new List<Users_Course>();
            FilteredCourses = Courses;
        }
    }

    private void ShowInProgressCourses() => FilteredCourses = Courses.Where(c => !c.Status).ToList();
    private void ShowCompletedCourses() => FilteredCourses = Courses.Where(c => c.Status).ToList();

    private async Task SelectCourse(Users_Course course)
    {
        SelectedCourse = course;
        Lessons = await DbContext.Users_Lessons
            .Include(ul => ul.ID_LessonNavigation)
            .Where(ul => ul.ID_User == CurrentUserService.GetCurrentUser().ID_User && ul.ID_LessonNavigation.ID_Course == course.ID_Course)
            .ToListAsync();
        FilteredLessons = Lessons;
    }

    private void NavigateToLesson(int lessonId)
    {
        NavigationManager.NavigateTo($"/lesson/{lessonId}");
    }
}
