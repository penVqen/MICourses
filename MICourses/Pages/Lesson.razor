@page "/lesson/{lessonId:int}"
@inject MIContext DbContext
@inject CurrentUserService CurrentUserService
@inject NavigationManager NavigationManager

<div class="container relative" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 50px; min-height: 100vh;">
    <!-- Кнопка "Назад" -->
    <div class="absolute top-5 right-5 flex items-center space-x-4">
        @if (IsTeacher)
        {
            <button @onclick="NavigateBack"
                    class="text-white px-4 py-2 rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    style="background-color: rgb(178, 146, 215);">
                Назад к панели преподавателя
            </button>
        }

        <!-- Кнопка закрытия -->
        <button @onclick="NavigateToEducation"
                class="text-gray-500 hover:text-gray-700 text-3xl focus:outline-none">
            &times;
        </button>
    </div>

    <h2 class="text-lg font-semibold text-gray-800" style="font-size: 50px; margin-bottom: 40px;">
        Урок: @CurrentLesson?.ID_LessonNavigation.Name
    </h2>
    <p class="text-gray-600" style="font-size: 24px; text-align: justify; margin-bottom: 100px;">
        @CurrentLesson?.ID_LessonNavigation.Description
    </p>
    <p class="text-gray-700" style="font-size: 20px; line-height: 2; text-align: justify; margin-bottom: 100px;">
        @CurrentLesson?.ID_LessonNavigation.Text
    </p>

    <div class="flex justify-center mt-6">
        @if (CurrentLesson != null && CurrentLesson.Status == false)
        {
            <button @onclick="MarkLessonAsRead"
                    class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
                Отметить прочитанным
            </button>
        }
        else if (CurrentLesson == null)
        {
            <p>Урок не найден или вы не записаны на этот урок.</p>
        }
    </div>
</div>

@code {
    [Parameter] public int lessonId { get; set; }
    private Users_Lesson CurrentLesson;

    // Флаг для определения роли пользователя
    private bool IsTeacher { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        var currentUser = CurrentUserService.GetCurrentUser();

        if (currentUser != null)
        {
            // Проверяем роль пользователя
            IsTeacher = currentUser.Role == "Teacher";

            CurrentLesson = await DbContext.Users_Lessons
                .Include(l => l.ID_LessonNavigation)
                .FirstOrDefaultAsync(l => l.ID_Lesson == lessonId && l.ID_User == currentUser.ID_User);
        }
    }

    private void NavigateToEducation()
    {
        NavigationManager.NavigateTo("/education");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/teacher-panel");
    }

    private async Task MarkLessonAsRead()
    {
        if (CurrentLesson != null)
        {
            CurrentLesson.Status = true;
            DbContext.Users_Lessons.Update(CurrentLesson);

            var currentUser = CurrentUserService.GetCurrentUser();
            if (currentUser != null)
            {
                var user = await DbContext.Users.FirstOrDefaultAsync(u => u.ID_User == currentUser.ID_User);
                if (user != null)
                {
                    user.Lvl += 52;
                    DbContext.Users.Update(user);
                }
            }

            await DbContext.SaveChangesAsync();
            NavigateToEducation();
        }
    }
}