@page "/edit-course/{courseId:int}"
@inject MIContext DbContext
@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService

<div class="container relative" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 50px; min-height: 100vh;">

    <button @onclick="NavigateToTeacherPanel"
            class="absolute text-white px-4 py-2 rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500 mr-2"
            style="top: 20px; right: 80px; background-color: rgb(178, 146, 215);">
        Назад к панели преподавателя
    </button>

    <button @onclick="NavigateToEducation"
            class="absolute text-gray-500 hover:text-gray-700 text-xl"
            style="top: 20px; right: 20px; font-size: 60px;">
        &times;
    </button>

    <h2 class="text-lg font-semibold text-gray-800" style="font-size: 50px; margin-bottom: 40px;">
        Редактирование курса
    </h2>

    <div style="margin-bottom: 20px;">
        <label for="courseName" class="block text-gray-700 text-lg font-medium">Название:</label>
        <input id="courseName" type="text" @bind="CourseName" class="border rounded w-full py-2 px-3 text-gray-700" />
    </div>

    <div style="margin-bottom: 20px;">
        <label for="courseDescription" class="block text-gray-700 text-lg font-medium">Описание:</label>
        <textarea id="courseDescription" @bind="CourseDescription" class="border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
    </div>

    <div style="margin-bottom: 20px;">
        <label for="studyPeriod" class="block text-gray-700 text-lg font-medium">Период обучения (недели):</label>
        <input id="studyPeriod" type="number" @bind="StudyPeriod" class="border rounded w-full py-2 px-3 text-gray-700" min="5" />
    </div>

    <div style="margin-bottom: 20px;">
        <label for="language" class="block text-gray-700 text-lg font-medium">Язык:</label>
        <select id="language" @bind="SelectedLanguage" class="border rounded w-full py-2 px-3 text-gray-700">
            <option value="">Выберите язык</option>
            @foreach (var language in ExistingLanguages)
            {
                <option value="@language">@language</option>
            }
        </select>
    </div>

    <div style="margin-bottom: 20px;">
        <label class="block text-gray-700 text-lg font-medium">Тип курса:</label>
        <div>
            <label>
                <input type="radio" name="testType" checked="@ForBeginners" @onchange="() => ForBeginners = true" />
                Продвинутый уровень
            </label>
        </div>
        <div>
            <label>
                <input type="radio" name="testType" checked="@(ForBeginners == false)" @onchange="() => ForBeginners = false" />
                Для начинающих
            </label>
        </div>
    </div>

    <div class="flex gap-4">
        <button @onclick="SaveChanges"
                class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
            Сохранить изменения
        </button>
        <button @onclick="SaveChangesAndNavigateToTeacherPanel"
                class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
            Сохранить изменения и перейти в панель преподавателя
        </button>
    </div>
</div>

@if (IsModalOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
            <h3 class="text-lg font-semibold">@ModalMessage</h3>
            <div class="flex justify-end gap-4 mt-6">
                <button @onclick="CloseModal"
                        class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private string CourseName;
    private string CourseDescription;
    private int StudyPeriod;
    private string SelectedLanguage;
    private bool ForBeginners;
    private List<string> ExistingLanguages = new();
    private bool IsModalOpen = false;
    private string ModalMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ExistingLanguages = await DbContext.Courses
            .Select(c => c.Language)
            .Distinct()
            .ToListAsync();

        var course = await DbContext.Courses.FindAsync(CourseId);

        if (course == null)
        {
            ModalMessage = "Курс не найден.";
            IsModalOpen = true;
            return;
        }

        CourseName = course.Name;
        CourseDescription = course.Description;
        StudyPeriod = int.Parse(course.StudyPeriod.Split(' ')[0]);
        SelectedLanguage = course.Language;
        ForBeginners = course.ForBeginners;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private async Task SaveChanges()
    {
        if (string.IsNullOrWhiteSpace(CourseName))
        {
            ModalMessage = "Вы не ввели название курса.";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(CourseDescription))
        {
            ModalMessage = "Вы не ввели описание курса.";
            IsModalOpen = true;
            return;
        }

        if (StudyPeriod < 5)
        {
            ModalMessage = "Период обучения не может быть меньше 5 недель.";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrEmpty(SelectedLanguage))
        {
            ModalMessage = "Вы не выбрали язык курса.";
            IsModalOpen = true;
            return;
        }

        var course = await DbContext.Courses.FindAsync(CourseId);

        if (course == null)
        {
            ModalMessage = "Курс не найден.";
            IsModalOpen = true;
            return;
        }

        course.Name = CourseName;
        course.Description = CourseDescription;
        course.StudyPeriod = StudyPeriod + " недель";
        course.Language = SelectedLanguage;
        course.ForBeginners = ForBeginners;

        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/education");
    }

    private async Task SaveChangesAndNavigateToTeacherPanel()
    {
        // Выполняем сохранение изменений
        if (string.IsNullOrWhiteSpace(CourseName))
        {
            ModalMessage = "Вы не ввели название курса.";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(CourseDescription))
        {
            ModalMessage = "Вы не ввели описание курса.";
            IsModalOpen = true;
            return;
        }

        if (StudyPeriod < 5)
        {
            ModalMessage = "Период обучения не может быть меньше 5 недель.";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrEmpty(SelectedLanguage))
        {
            ModalMessage = "Вы не выбрали язык курса.";
            IsModalOpen = true;
            return;
        }

        var course = await DbContext.Courses.FindAsync(CourseId);

        if (course == null)
        {
            ModalMessage = "Курс не найден.";
            IsModalOpen = true;
            return;
        }

        course.Name = CourseName;
        course.Description = CourseDescription;
        course.StudyPeriod = StudyPeriod + " недель";
        course.Language = SelectedLanguage;
        course.ForBeginners = ForBeginners;

        await DbContext.SaveChangesAsync();

        // Перенаправляем на панель преподавателя
        NavigationManager.NavigateTo("/teacher-panel");
    }

    void NavigateToEducation()
    {
        NavigationManager.NavigateTo("/education");
    }

    void NavigateToTeacherPanel()
    {
        NavigationManager.NavigateTo("/teacher-panel");
    }
}