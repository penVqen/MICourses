@page "/create-lesson/{CourseId:int}"
@inject MIContext DbContext
@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService

<div class="container relative" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 50px; min-height: 100vh;">
    <button @onclick="NavigateToEducation"
            class="absolute text-gray-500 hover:text-gray-700 text-xl"
            style="top: 20px; right: 20px; font-size: 60px;">
        &times;
    </button>

    <h2 class="text-lg font-semibold text-gray-800" style="font-size: 50px; margin-bottom: 40px;">
        Создание урока
    </h2>

    <div style="margin-bottom: 20px;">
        <label for="lessonName" class="block text-gray-700 text-lg font-medium">Название урока:</label>
        <input id="lessonName" type="text" @bind="LessonName" class="border rounded w-full py-2 px-3 text-gray-700" />
    </div>

    <div style="margin-bottom: 20px;">
        <label for="lessonDescription" class="block text-gray-700 text-lg font-medium">Описание урока:</label>
        <textarea id="lessonDescription" @bind="LessonDescription" class="border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
    </div>

    <div style="margin-bottom: 20px;">
        <label for="lessonText" class="block text-gray-700 text-lg font-medium">Текст урока:</label>
        <textarea id="lessonText" @bind="LessonText" class="border rounded w-full py-2 px-3 text-gray-700" rows="6"></textarea>
    </div>

    <button @onclick="CreatesLesson" class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
        Создать урок
    </button>
</div>

@if (IsModalOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
            <h3 class="text-lg font-semibold">@ModalMessage</h3>
            <div class="flex justify-end gap-4 mt-6">
                <button @onclick="CloseModal"
                        class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private string LessonName;
    private string LessonDescription;
    private string LessonText;
    private bool IsModalOpen = false;
    private string ModalMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var existingLessonsCount = await DbContext.Lessons
            .Where(l => l.ID_Course == CourseId)
            .CountAsync();

        LessonNumber = existingLessonsCount + 1;
    }

    private int LessonNumber { get; set; }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private async Task CreatesLesson()
    {
        if (string.IsNullOrWhiteSpace(LessonName))
        {
            ModalMessage = "Вы не ввели название урока";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(LessonDescription))
        {
            ModalMessage = "Вы не ввели описание урока";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(LessonText))
        {
            ModalMessage = "Вы не ввели текст урока";
            IsModalOpen = true;
            return;
        }

        var newLesson = new MICourses.Models.Lesson
            {
                ID_Course = CourseId,
                Number = LessonNumber,
                Name = LessonName,
                Description = LessonDescription,
                Text = LessonText
            };

        DbContext.Lessons.Add(newLesson);
        await DbContext.SaveChangesAsync();

        int newLessonId = newLesson.ID_Lesson;

        var enrolledUsers = await DbContext.Users_Courses
            .Where(uc => uc.ID_Course == CourseId)
            .Select(uc => uc.ID_User)
            .ToListAsync();

        var userLessons = enrolledUsers.Select(userId => new MICourses.Models.Users_Lesson
            {
                ID_User = userId,
                ID_Lesson = newLessonId,
                Status = false
            });

        DbContext.Users_Lessons.AddRange(userLessons);
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/education");
    }


    void NavigateToEducation()
    {
        NavigationManager.NavigateTo("/education");
    }
}