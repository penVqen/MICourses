@page "/create-test"
@inject MIContext DbContext
@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService  // Внедряем сервис для текущего пользователя
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization

<div class="container relative" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 50px; min-height: 100vh;">
    <button @onclick="NavigateToEducation"
            class="absolute text-gray-500 hover:text-gray-700 text-xl"
            style="top: 20px; right: 20px; font-size: 60px;">
        &times;
    </button>

    <h2 class="text-lg font-semibold text-gray-800" style="font-size: 50px; margin-bottom: 40px;">
        Создание теста
    </h2>

    <!-- Выбор курса -->
    <div style="margin-bottom: 20px;">
        <label class="block text-gray-700 text-lg font-medium">Курс:</label>
        <select @onchange="LoadLessonsForCourse" class="border rounded w-full py-2 px-3 text-gray-700">
            <option value="" disabled selected>Выберите курс</option>
            @foreach (var course in ExistingCourses)
            {
                <option value="@course.ID_Course">@course.Name</option>
            }
        </select>
    </div>

    <!-- Выбор урока (отображается только после выбора курса) -->
    @if (SelectedCourse != null && LessonsForSelectedCourse.Any())
    {
        <div style="margin-bottom: 20px;">
            <label class="block text-gray-700 text-lg font-medium">Урок:</label>
            <select @bind="SelectedLesson" class="border rounded w-full py-2 px-3 text-gray-700">
                <option value="" disabled selected>Выберите урок</option>
                @foreach (var lesson in LessonsForSelectedCourse)
                {
                    <option value="@lesson.ID_Lesson">@lesson.Name</option>
                }
            </select>
        </div>
    }

    <!-- Название теста (отображается только после выбора урока) -->
    @if (SelectedLesson != null)
    {
        <div style="margin-bottom: 20px;">
            <label for="testName" class="block text-gray-700 text-lg font-medium">Название теста:</label>
            <input id="testName" type="text" @bind="TestName" class="border rounded w-full py-2 px-3 text-gray-700" />
        </div>

        <!-- Описание теста -->
        <div style="margin-bottom: 20px;">
            <label for="testDescription" class="block text-gray-700 text-lg font-medium">Описание теста:</label>
            <textarea id="testDescription" @bind="TestDescription" class="border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
        </div>

        <div style="margin-bottom: 20px;">
            <div class="flex gap-4">
                <label class="inline-flex items-center">
                    <input type="checkbox" class="form-checkbox" @bind="IsFinal" />
                    <span class="ml-2">Итоговый тест</span>
                </label>
            </div>
        </div>

        <!-- Создание вопроса -->
        <div style="margin-bottom: 40px;">
            <h3 class="text-xl font-semibold text-gray-800">Создание Вопроса</h3>

            <div style="margin-bottom: 20px;">
                <label for="questionText" class="block text-gray-700 text-lg font-medium">Текст вопроса:</label>
                <input id="questionText" type="text" @bind="QuestionText" class="border rounded w-full py-2 px-3 text-gray-700" />
            </div>

            <button @onclick="AddQuestion" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
                Добавить вопрос
            </button>

            <!-- Список вопросов -->
            @foreach (var question in Questions)
            {
                <div class="mt-4">
                    <h4 class="text-lg font-semibold">Ответы для вопроса: @question.Text</h4>

                    <!-- Поля для ввода ответов -->
                    <div style="margin-bottom: 20px;">
                        <label for="answerText" class="block text-gray-700 text-lg font-medium">Текст ответа:</label>
                        <input id="answerText" type="text" @bind="AnswerText" class="border rounded w-full py-2 px-3 text-gray-700" />
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label class="inline-flex items-center">
                            <input type="checkbox" class="form-checkbox" @bind="IsCorrect" />
                            <span class="ml-2">Правильный ответ</span>
                        </label>
                    </div>

                    <button @onclick="AddQuestion" class="btn btn-primary">Добавить вопрос</button>
                </div>
            }
        </div>

        <button @onclick="CreatesTest" class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
            Создать тест
        </button>
    }
</div>

@if (IsModalOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
            <h3 class="text-lg font-semibold">@ModalMessage</h3>
            <div class="flex justify-end gap-4 mt-6">
                <button @onclick="CloseModal"
                        class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string TestName;
    private string TestDescription;
    private bool? IsFinal = false;
    private string QuestionText; // Для ввода текста вопроса
    private string AnswerText;   // Для ввода текста ответа
    private bool IsCorrect;      // Для отметки правильного ответа
    private List<MICourses.Models.Question> Questions = new List<MICourses.Models.Question>(); // Список вопросов для текущего теста
    private List<MICourses.Models.Answer> AnswersForCurrentQuestion = new List<MICourses.Models.Answer>(); // Список ответов для текущего вопроса

    private List<MICourses.Models.Course> ExistingCourses = new();
    private List<MICourses.Models.Lesson> LessonsForSelectedCourse = new();
    private int? SelectedCourse { get; set; }
    private int? SelectedLesson { get; set; }

    private bool IsModalOpen = false;
    private string ModalMessage = string.Empty;

    private User currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = CurrentUserService.GetCurrentUser();

        if (currentUser != null)
        {
            ExistingCourses = await DbContext.Users_Courses
                .Where(uc => uc.ID_User == currentUser.ID_User && uc.Author == true)
                .Select(uc => uc.ID_CourseNavigation)
                .ToListAsync();
        }
        else
        {
            ModalMessage = "Пользователь не авторизован";
            IsModalOpen = true;
        }
    }

    private async Task LoadLessonsForCourse(ChangeEventArgs e)
    {
        SelectedLesson = null;

        if (e.Value != null)
        {
            int courseId = Convert.ToInt32(e.Value);
            LessonsForSelectedCourse = await DbContext.Lessons.Where(l => l.ID_Course == courseId).ToListAsync();
            SelectedCourse = courseId;
        }
        else
        {
            LessonsForSelectedCourse.Clear();
            SelectedCourse = null;
        }
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private void AddQuestion()
    {
        if (string.IsNullOrWhiteSpace(QuestionText))
        {
            ModalMessage = "Текст вопроса не может быть пустым";
            IsModalOpen = true;
            return;
        }

        // Создаем новый вопрос
        var newQuestion = new MICourses.Models.Question
            {
                Text = QuestionText,
                ID_Test = SelectedLesson.Value // Привязываем вопрос к тесту
            };

        // Добавляем вопрос в список вопросов
        Questions.Add(newQuestion);
        QuestionText = string.Empty; // Очищаем поле ввода вопроса
    }

    private void AddAnswerToQuestion(MICourses.Models.Question question)
    {
        if (string.IsNullOrWhiteSpace(AnswerText))
        {
            ModalMessage = "Текст ответа не может быть пустым";
            IsModalOpen = true;
            return;
        }

        var newAnswer = new MICourses.Models.Answer
            {
                Text = AnswerText,
                Correct = IsCorrect,
                ID_Question = question.ID_Question // Связываем ответ с вопросом
            };

        // Добавляем ответ в список ответов для текущего вопроса
        AnswersForCurrentQuestion.Add(newAnswer);
        AnswerText = string.Empty; // Очищаем поле ввода ответа
        IsCorrect = false; // Сбрасываем флаг правильности
    }

    private async Task CreatesTest()
    {
        if (string.IsNullOrWhiteSpace(TestName))
        {
            ModalMessage = "Вы не ввели название теста";
            IsModalOpen = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(TestDescription))
        {
            ModalMessage = "Вы не ввели описание теста";
            IsModalOpen = true;
            return;
        }

        if (SelectedCourse == null)
        {
            ModalMessage = "Вы не выбрали курс";
            IsModalOpen = true;
            return;
        }

        if (SelectedLesson == null)
        {
            ModalMessage = "Вы не выбрали урок";
            IsModalOpen = true;
            return;
        }

        var newTest = new MICourses.Models.Test
            {
                Name = TestName,
                Description = TestDescription,
                IsFinal = IsFinal,
                ID_Lesson = SelectedLesson.Value
            };

        DbContext.Tests.Add(newTest);
        await DbContext.SaveChangesAsync();

        // Добавляем все вопросы
        foreach (var question in Questions)
        {
            question.ID_Test = newTest.ID_Test; // Привязываем вопрос к тесту
            DbContext.Questions.Add(question);

            // Добавляем ответы для каждого вопроса
            foreach (var answer in AnswersForCurrentQuestion)
            {
                answer.ID_Question = question.ID_Question; // Привязываем ответ к вопросу
                DbContext.Answers.Add(answer);
            }
        }

        await DbContext.SaveChangesAsync(); // Сохраняем изменения

        NavigationManager.NavigateTo("/education");
    }

    void NavigateToEducation()
    {
        NavigationManager.NavigateTo("/education");
    }
}
