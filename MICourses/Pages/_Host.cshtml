@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace MICourses.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <base href="/" />
    <link href="css/site.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.iconify.design/2/2.1.2/iconify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="module" src="js/chartHelpers.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <script>
        function downloadFileFromStream(fileName, fileData) {
            var blob = new Blob([fileData], { type: 'application/octet-stream' });
            var link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            link.click();
        }

    </script>



    <script src="_framework/blazor.server.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="js/Diagram.js"></script>

    <script>
        function downloadFileFromStream(fileName, fileData) {
            var blob = new Blob([fileData], { type: 'application/octet-stream' });
            var link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            link.click();
        }

        window.saveAsFile = function (filename, data) {
            const link = document.createElement('a');
            link.href = `data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${data}`;
            link.download = filename;
            link.click();
        };

        // Новая функция для сохранения файла с выбором директории
        window.saveAsFileWithDirectory = async function (dotNetHelper, fileName, content) {
            const byteCharacters = atob(content);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);

            // Создаем Blob
            const blob = new Blob([byteArray], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });

            // Проверяем поддержку showSaveFilePicker
            if ('showSaveFilePicker' in window) {
                try {
                    const handle = await window.showSaveFilePicker({
                        suggestedName: fileName,
                        types: [{
                            description: 'Excel Files',
                            accept: { 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'] },
                        }],
                    });
                    const writable = await handle.createWritable();
                    await writable.write(blob);
                    await writable.close();

                    // Уведомляем Blazor о завершении
                    dotNetHelper.invokeMethodAsync('OnFileSaved', handle.name);
                } catch (err) {
                    console.error('Error saving file:', err);
                    alert('Ошибка при сохранении файла. Попробуйте другой метод.');
                }
            } else {
                // Если браузер не поддерживает showSaveFilePicker, используем старый метод
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileName;
                link.click();
                URL.revokeObjectURL(link.href);

                // Уведомляем Blazor о завершении
                dotNetHelper.invokeMethodAsync('OnFileSaved', fileName);
            }
        };</script>
</body>
</html>
