@page "/registration"
@using MICourses.Models
@using MICourses.Layout
@using MICourses.Services
@inject UserDataService UserDataService
@inject NavigationManager NavigationManager

<NavMenu />

<div class="flex items-center justify-center h-screen">
    <div class="bg-white p-16 rounded shadow-md max-w-lg w-full">
        <h2 class="text-center mb-10" style="font-family: Arial; font-size: 2rem; font-weight: normal; white-space: nowrap;">Регистрация</h2>

        @if (IsRegistrationSuccessful)
        {
            <div class="text-center">
                <p class="text-green-500 text-lg">Вы успешно зарегистрировались! Перенаправление...</p>
            </div>
        }
        else
        {
            <form class="space-y-6" @onsubmit="HandleRegister">
                <div>
                    <input type="text" @bind="Login" placeholder="Введите логин"
                           class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-lg" />
                    @if (!string.IsNullOrEmpty(LoginErrorMessage))
                    {
                        <p class="text-red-500 mt-2">@LoginErrorMessage</p>
                    }
                </div>

                <div>
                    <input type="email" @bind="Email" placeholder="Введите email"
                           class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-lg" />
                    @if (!string.IsNullOrEmpty(EmailErrorMessage))
                    {
                        <p class="text-red-500 mt-2">@EmailErrorMessage</p>
                    }
                </div>

                <div>
                    <input type="password" @bind="Password" placeholder="Придумайте пароль"
                           class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-lg" />
                    @if (!string.IsNullOrEmpty(PasswordErrorMessage))
                    {
                        <p class="text-red-500 mt-2">@PasswordErrorMessage</p>
                    }
                    <p class="mt-2 text-sm text-gray-500">Не менее 6 символов, включая 1 цифру, 1 заглавную букву и 1 специальный символ.</p>
                </div>

                <!-- Чекбокс с правилами -->
                <div class="flex items-center space-x-2">
                    <input type="checkbox" @bind="IsRulesAccepted" id="rules-checkbox" class="h-5 w-5 text-purple-600" />
                    <label for="rules-checkbox" class="text-sm text-gray-700">
                        Подтверждаю, что ознакомлен
                        <button type="button" @onclick="ShowRulesModal" class="text-purple-500 hover:underline">
                            с правилами портала
                        </button>
                    </label>
                </div>

                <!-- Кнопка регистрации -->
                <div>
                    <button type="submit"
                            class="w-full text-white py-3 px-4 rounded-md hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2"
                            style="background-color: rgb(178, 146, 215); font-size: 1.2rem;"
                            disabled="@(!IsRulesAccepted)">
                        Зарегистрироваться
                    </button>
                </div>
            </form>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-red-500 text-center mt-4">@ErrorMessage</p>
            }
        }

        <p class="mt-10 text-center text-lg text-gray-600">
            Уже есть аккаунт?
            <a href="/authorization" class="text-purple-500 hover:underline">Войти</a>
        </p>
    </div>
</div>

@if (IsRulesModalOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
        <div class="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-3xl mx-auto relative overflow-hidden"
             style="border: 1px solid rgba(255, 255, 255, 0.1); background: linear-gradient(145deg, #ffffff, #f0f0f0);">
            <h3 class="text-3xl font-bold text-gray-800 mb-6 text-center"
                style="letter-spacing: 1px; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                Правила портала
            </h3>

            <p class="text-gray-600 text-lg leading-relaxed mb-6">
                Добро пожаловать на наш образовательный портал! Пожалуйста, ознакомьтесь с основными правилами:
            </p>

            <ul class="space-y-4">
                <li class="flex items-start">
                    <span class="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </span>
                    <span class="text-gray-700 text-lg">Будьте вежливы и уважайте других участников портала.</span>
                </li>
                <li class="flex items-start">
                    <span class="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </span>
                    <span class="text-gray-700 text-lg">Не размещайте запрещенный контент, а также контент, нарушающий авторские права.</span>
                </li>
                <li class="flex items-start">
                    <span class="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </span>
                    <span class="text-gray-700 text-lg">Соблюдайте сроки выполнения заданий и тестов.</span>
                </li>
                <li class="flex items-start">
                    <span class="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </span>
                    <span class="text-gray-700 text-lg">Не распространяйте личные данные других пользователей.</span>
                </li>
            </ul>

            <p class="mt-6 text-red-500 text-lg font-semibold">
                В случае несоблюдения правил портала ваш аккаунт может быть заблокирован.
            </p>

            <div class="flex justify-end mt-8">
                <button @onclick="CloseRulesModal"
                        class="py-3 px-6 bg-indigo-600 text-white rounded-full text-lg font-medium hover:bg-indigo-700 transition duration-300 ease-in-out transform hover:scale-105">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string Login { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;

    private string ErrorMessage { get; set; }
    private string LoginErrorMessage { get; set; }
    private string EmailErrorMessage { get; set; }
    private string PasswordErrorMessage { get; set; }
    private bool IsRegistrationSuccessful { get; set; } = false;

    private bool IsRulesModalOpen { get; set; } = false;
    private bool IsRulesAccepted { get; set; } = false;

    private async Task HandleRegister()
    {
        ErrorMessage = string.Empty;
        LoginErrorMessage = string.Empty;
        EmailErrorMessage = string.Empty;
        PasswordErrorMessage = string.Empty;

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Login))
        {
            LoginErrorMessage = "Поле логин не может быть пустым.";
            isValid = false;
        }
        else if (Login.Length < 5 || Login.Length > 16)
        {
            LoginErrorMessage = "Длина логина должна быть от 5 до 16 символов.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(Email))
        {
            EmailErrorMessage = "Поле email не может быть пустым.";
            isValid = false;
        }
        else if (!System.Text.RegularExpressions.Regex.IsMatch(Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            EmailErrorMessage = "Введите корректный email.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(Password))
        {
            PasswordErrorMessage = "Поле пароль не может быть пустым.";
            isValid = false;
        }
        else if (Password.Length < 6 || Password.Length > 16 ||
                 !System.Text.RegularExpressions.Regex.IsMatch(Password, @"(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$"))
        {
            PasswordErrorMessage = "Пароль должен содержать от 6 до 16 символов, включая 1 заглавную букву, 1 цифру и 1 специальный символ.";
            isValid = false;
        }

        if (!isValid)
        {
            return;
        }

        var userExists = await UserDataService.CheckUserExistsAsync(Login, Email);
        if (userExists)
        {
            ErrorMessage = "Пользователь с таким логином или email уже существует.";
            return;
        }

        var newUser = new User
            {
                Login = Login,
                Email = Email,
                Password = Password,
                Role = "User",
                Lvl = 100
            };

        await UserDataService.AddUserAsync(newUser);

        IsRegistrationSuccessful = true;

        await Task.Delay(2000);
        NavigationManager.NavigateTo("/authorization");
    }

    private void ShowRulesModal()
    {
        IsRulesModalOpen = true;
    }

    private void CloseRulesModal()
    {
        IsRulesModalOpen = false;
    }
}