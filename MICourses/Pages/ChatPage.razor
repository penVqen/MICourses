@page "/chat"
@inject MIContext Db
@inject CurrentUserService CurrentUserService
@inject NavigationManager NavManager

<style>
    /* Общий контейнер чата */
    .chat-container {
        display: flex;
        height: 90vh;
        margin: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
        overflow: hidden;
    }

    /* Список чатов */
    .chat-list {
        width: 30%;
        border-right: 1px solid #e0e0e0;
        padding: 15px;
        background-color: #f9f9f9;
        overflow-y: auto;
    }

    .chat-item {
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .chat-item:hover {
            background-color: #e9e9e9;
        }

        .chat-item.active {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }

    .chat-title {
        font-size: 16px;
        font-weight: 600;
    }

    .chat-subtitle {
        font-size: 13px;
        color: #666;
    }

    /* Окно чата */
    .chat-window {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 15px;
    }

    /* Сообщения */
    .message-box {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #f8f8f8;
        margin-bottom: 15px;
    }

    .message {
        display: flex;
        flex-direction: column;
        margin-bottom: 16px;
        padding: 12px;
        border-radius: 10px;
        max-width: 70%;
        font-size: 14px;
        line-height: 1.5;
    }

        .message.user {
            background-color: #cce5ff;
            color: #003366;
            border-top-right-radius: 4px;
        }

        .message.teacher {
            background-color: #d4edda;
            color: #155724;
            border-top-left-radius: 4px;
        }

    .message-header {
        font-weight: bold;
        margin-bottom: 4px;
    }

    .message-username {
        font-weight: 600;
    }

    .message-fullname {
        font-weight: normal;
        font-style: italic;
        color: #666;
        margin-left: 6px;
    }

    .message-role {
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
        color: #555;
    }

    .message-content {
        font-weight: 500;
    }

    .message-time {
        font-size: 11px;
        text-align: right;
        margin-top: 4px;
        color: #777;
    }

    /* Форма ввода */
    .chat-input {
        display: flex;
        gap: 10px;
    }

        .chat-input input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 14px;
        }

        .chat-input button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .chat-input button:hover {
                background-color: #0056b3;
            }

    /* Адаптивность */
    @@media (max-width: 768px) {
        .chat-container {
            flex-direction: column;
        }

        .chat-list {
            width: 100%;
            border-right: none;
            border-bottom: 1px solid #e0e0e0;
        }
    }
</style>

<div class="chat-container">
    <!-- Список чатов -->
    <div class="chat-list">
        <h3>Чаты</h3>
        @if (chats.Any())
        {
            @foreach (var chat in chats)
            {
                <div class="chat-item @(selectedChat?.ChatID == chat.ChatID ? "active" : "")"
                     @onclick="() => SelectChat(chat)">
                    <div class="chat-title">@GetParticipantName(chat)</div>
                    <div class="chat-subtitle">@chat.Course.Name</div>
                </div>
            }
        }
        else
        {
            <p>Нет активных чатов</p>
        }
    </div>

    <!-- Окно чата -->
    <div class="chat-window">
        @if (selectedChat != null)
        {
            <div class="message-box">
                @foreach (var msg in selectedChat.Messages.OrderBy(m => m.Timestamp))
                {
                    <div class="message @(msg.UserID == currentUser.ID_User ? "user" : "teacher")">
                        <!-- Логин и ФИО -->
                        <div class="message-header">
                            <span class="message-username">@msg.User.Login</span>
                            <span class="message-fullname">(@msg.User.Name @msg.User.Surname)</span>
                        </div>

                        <!-- Роль в чате -->
                        <div class="message-role">
                            @(GetUserRoleInChat(msg.UserID, selectedChat))
                        </div>

                        <!-- Содержание сообщения -->
                        <div class="message-content">
                            @msg.Content
                        </div>

                        <!-- Время -->
                        <div class="message-time">
                            @msg.Timestamp.ToString("HH:mm")
                        </div>
                    </div>
                }
            </div>

            <!-- Форма ввода -->
            <div class="chat-input">
                <input @bind-value="newMessage" placeholder="Введите сообщение..." />
                <button @onclick="SendMessage">Отправить</button>
            </div>
        }
        else
        {
            <p>Выберите чат</p>
        }
    </div>
</div>

@code {
    private List<Chat> chats = new();
    private Chat selectedChat;
    private string newMessage = "";
    private User currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = CurrentUserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavManager.NavigateTo("/authorization");
            return;
        }

        chats = new List<Chat>();

        if (currentUser.Role == "User")
        {
            var studentCourses = await Db.Users_Courses
                .Where(uc => uc.ID_User == currentUser.ID_User && !uc.Author)
                .Include(uc => uc.ID_CourseNavigation)
                .ToListAsync();

            var teacherIds = new List<int>();
            foreach (var course in studentCourses)
            {
                var teacher = await Db.Users_Courses
                    .Where(uc => uc.ID_Course == course.ID_Course && uc.Author)
                    .Select(uc => uc.ID_User)
                    .FirstOrDefaultAsync();
                if (teacher != 0)
                    teacherIds.Add(teacher);
            }

            if (teacherIds.Any())
            {
                chats = await Db.Chats
                    .Include(c => c.Student)
                    .Include(c => c.Teacher)
                    .Include(c => c.Course)
                    .Include(c => c.Messages)
                        .ThenInclude(m => m.User)
                    .Where(c =>
                        c.StudentID == currentUser.ID_User &&
                        teacherIds.Contains(c.TeacherID))
                    .ToListAsync();
            }
        }
        else if (currentUser.Role == "Teacher")
        {
            var teacherCourses = await Db.Users_Courses
                .Where(uc => uc.ID_User == currentUser.ID_User && uc.Author)
                .Include(uc => uc.ID_CourseNavigation)
                .ToListAsync();

            var studentIds = new List<int>();
            foreach (var course in teacherCourses)
            {
                var students = await Db.Users_Courses
                    .Where(uc => uc.ID_Course == course.ID_Course && !uc.Author)
                    .Select(uc => uc.ID_User)
                    .ToListAsync();

                studentIds.AddRange(students);
            }

            if (studentIds.Any())
            {
                chats = await Db.Chats
                    .Include(c => c.Student)
                    .Include(c => c.Teacher)
                    .Include(c => c.Course)
                    .Include(c => c.Messages)
                        .ThenInclude(m => m.User)
                    .Where(c =>
                        c.TeacherID == currentUser.ID_User &&
                        studentIds.Contains(c.StudentID))
                    .ToListAsync();
            }
        }
    }

    private string GetParticipantName(Chat chat)
    {
        if (currentUser.Role == "User") // Студент
            return chat.Teacher.Login;
        else // Преподаватель
            return chat.Student.Login;
    }

    private string GetUserRoleInChat(int userId, Chat chat)
    {
        if (userId == chat.StudentID)
        {
            return "Участник курса";
        }
        else if (userId == chat.TeacherID)
        {
            return "Преподаватель курса";
        }
        return "Неизвестная роль";
    }

    private void SelectChat(Chat chat)
    {
        selectedChat = chat;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        var message = new Message
            {
                ChatID = selectedChat.ChatID,
                UserID = currentUser.ID_User,
                Content = newMessage,
                Timestamp = DateTime.Now
            };

        Db.Messages.Add(message);
        await Db.SaveChangesAsync();
        newMessage = "";
        StateHasChanged();
    }
}