@page "/profile"
@using MICourses.Services
@using MICourses.Models
@inject CurrentUserService CurrentUserService
@inject MIContext DbContext
@inject NavigationManager NavigationManager

<div class="container" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 150px; min-height: calc(100vh - 100px);">
    <h1 class="text-4xl font-bold" style="font-family: Arial, sans-serif; margin-bottom: 20px;">Личная информация</h1>

    <div style="background: white; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); padding: 20px; width: 100%; box-sizing: border-box;">
        <form>
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">
                <div>
                    <label style="font-family: Arial, sans-serif; font-size: 14px;">Фамилия</label>
                    <input type="text" @bind="EditableUser.Surname" disabled="@IsReadOnly"
                           style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-top: 5px;">
                </div>
                <div>
                    <label style="font-family: Arial, sans-serif; font-size: 14px;">Имя</label>
                    <input type="text" @bind="EditableUser.Name" disabled="@IsReadOnly"
                           style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-top: 5px;">
                </div>
                <div>
                    <label style="font-family: Arial, sans-serif; font-size: 14px;">Отчество</label>
                    <input type="text" @bind="EditableUser.MiddleName" disabled="@IsReadOnly"
                           style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-top: 5px;">
                </div>
                <div>
                    <label style="font-family: Arial, sans-serif; font-size: 14px;">Дата рождения</label>
                    <input type="date" @bind="EditableUser.Birthday" disabled="@IsReadOnly"
                           style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-top: 5px;">
                </div>
                <div>
                    <label style="font-family: Arial, sans-serif; font-size: 14px;">Номер телефона</label>
                    <input type="text" @bind="EditableUser.PhoneNumber" disabled="@IsReadOnly"
                           style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-top: 5px;">
                </div>
                <div>
                    <label style="font-family: Arial, sans-serif; font-size: 14px;">Пол</label>
                    <select @bind="EditableUser.Sex" disabled="@IsReadOnly"
                            style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-top: 5px;">
                        <option value="Male">Мужской</option>
                        <option value="Female">Женский</option>
                    </select>
                </div>
            </div>

            <div style="margin-top: 20px; display: flex; gap: 10px;">
                @if (IsReadOnly)
                {
                    <button type="button" @onclick="EnableEditing" style="background: #B292D7; color: white; border: none; padding: 10px 20px; border-radius: 10px; font-family: Arial, sans-serif; cursor: pointer;">Редактировать</button>
                }
                else
                {
                    <button type="button" @onclick="SaveChanges" style="background: #B292D7; color: white; border: none; padding: 10px 20px; border-radius: 10px; font-family: Arial, sans-serif; cursor: pointer;">Сохранить</button>
                    <button type="button" @onclick="CancelChanges" style="background: #B292D7; color: white; border: none; padding: 10px 20px; border-radius: 10px; font-family: Arial, sans-serif; cursor: pointer;">Отменить изменения</button>
                }
            </div>
        </form>
    </div>

    <div style="margin: 40px 0;"></div>

    <div style="background: white; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); padding: 20px; width: 100%; box-sizing: border-box;">
        <h2 style="font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; margin-bottom: 10px;">Удаление профиля</h2>
        <p style="font-family: Arial, sans-serif; font-size: 14px; color: #555;">После нажатия кнопки 'Удалить профиль' все ваши данные будут безвозвратно удалены. Пожалуйста, будьте уверены в своем решении.</p>
        <button type="button" @onclick="DeleteProfile" style="background: black; color: white; border: none; padding: 10px 20px; border-radius: 10px; font-family: Arial, sans-serif; cursor: pointer; margin-top: 10px;">Удалить профиль</button>
    </div>
</div>

@code {
    private User EditableUser { get; set; }
    private User OriginalUser { get; set; }
    private bool IsReadOnly { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = CurrentUserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/authorization");
            return;
        }

        OriginalUser = await DbContext.Users.FindAsync(currentUser.ID_User);
        EditableUser = new User
            {
                ID_User = OriginalUser.ID_User,
                Surname = OriginalUser.Surname,
                Name = OriginalUser.Name,
                MiddleName = OriginalUser.MiddleName,
                Birthday = OriginalUser.Birthday,
                PhoneNumber = OriginalUser.PhoneNumber,
                Sex = OriginalUser.Sex
            };
    }

    private void EnableEditing()
    {
        IsReadOnly = false;
    }

    private async Task SaveChanges()
    {
        IsReadOnly = true;

        var userToUpdate = await DbContext.Users.FindAsync(EditableUser.ID_User);
        if (userToUpdate != null)
        {
            userToUpdate.Surname = EditableUser.Surname;
            userToUpdate.Name = EditableUser.Name;
            userToUpdate.MiddleName = EditableUser.MiddleName;
            userToUpdate.Birthday = EditableUser.Birthday;
            userToUpdate.PhoneNumber = EditableUser.PhoneNumber;
            userToUpdate.Sex = EditableUser.Sex;

            await DbContext.SaveChangesAsync();
            OriginalUser = new User
                {
                    ID_User = userToUpdate.ID_User,
                    Surname = userToUpdate.Surname,
                    Name = userToUpdate.Name,
                    MiddleName = userToUpdate.MiddleName,
                    Birthday = userToUpdate.Birthday,
                    PhoneNumber = userToUpdate.PhoneNumber,
                    Sex = userToUpdate.Sex
                };
        }
    }

    private void CancelChanges()
    {
        IsReadOnly = true;
        EditableUser = new User
            {
                ID_User = OriginalUser.ID_User,
                Surname = OriginalUser.Surname,
                Name = OriginalUser.Name,
                MiddleName = OriginalUser.MiddleName,
                Birthday = OriginalUser.Birthday,
                PhoneNumber = OriginalUser.PhoneNumber,
                Sex = OriginalUser.Sex
            };
    }

    private async Task DeleteProfile()
    {
        var userToDelete = await DbContext.Users.FindAsync(OriginalUser.ID_User);
        if (userToDelete != null)
        {
            DbContext.Users.Remove(userToDelete);
            await DbContext.SaveChangesAsync();
            CurrentUserService.Logout();
            NavigationManager.NavigateTo("/authorization");
        }
    }
}
