@page "/profile"
@inject CurrentUserService CurrentUserService
@inject MIContext DbContext
@inject NavigationManager NavigationManager

<div class="container" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 150px; min-height: 100vh;">
    <div style="width: 100%; margin-top: 12px;">
        <h1 class="text-4xl font-bold mb-8">Личная информация</h1>
        <div class="bg-white rounded-lg shadow-md p-6" style="width: 100%;">
            <form>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Фамилия</label>
                        <input type="text" @bind="EditableUser.Surname" disabled="@IsReadOnly" @oninput="ValidateSurname"
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        @if (!string.IsNullOrWhiteSpace(SurnameError))
                        {
                            <span class="text-red-500 text-xs">@SurnameError</span>
                        }
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Имя</label>
                        <input type="text" @bind="EditableUser.Name" disabled="@IsReadOnly" @oninput="ValidateName"
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        @if (!string.IsNullOrWhiteSpace(NameError))
                        {
                            <span class="text-red-500 text-xs">@NameError</span>
                        }
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Отчество</label>
                        <input type="text" @bind="EditableUser.MiddleName" disabled="@IsReadOnly" @oninput="ValidateMiddleName"
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        @if (!string.IsNullOrWhiteSpace(MiddleNameError))
                        {
                            <span class="text-red-500 text-xs">@MiddleNameError</span>
                        }
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Дата рождения</label>
                        <input type="date" @bind="EditableUser.Birthday" disabled="@IsReadOnly" @oninput="ValidateBirthday"
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        @if (!string.IsNullOrWhiteSpace(BirthdayError))
                        {
                            <span class="text-red-500 text-xs">@BirthdayError</span>
                        }
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Номер телефона</label>
                        <input type="text" @bind="EditableUser.PhoneNumber" disabled="@IsReadOnly" @oninput="ValidatePhoneNumber"
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        @if (!string.IsNullOrWhiteSpace(PhoneNumberError))
                        {
                            <span class="text-red-500 text-xs">@PhoneNumberError</span>
                        }
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Пол</label>
                        <select @bind="EditableUser.Sex" disabled="@IsReadOnly"
                                class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <option value="Male">Мужской</option>
                            <option value="Female">Женский</option>
                        </select>
                    </div>
                </div>
                <div class="flex gap-4 mt-6">
                    @if (IsReadOnly)
                    {
                        <button type="button" @onclick="EnableEditing"
                                class="text-white px-4 py-2 rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                style="background-color: rgb(178, 146, 215);">
                            Редактировать
                        </button>
                    }
                    else
                    {
                        <button type="button" @onclick="SaveChanges"
                                class="text-white px-4 py-2 rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                style="background-color: rgb(178, 146, 215);">
                            Сохранить
                        </button>
                        <button type="button" @onclick="CancelChanges"
                                class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                            Отменить изменения
                        </button>
                    }
                </div>
            </form>
        </div>

        <!-- Плашка удаления профиля -->
        <div class="mt-10 bg-white rounded-lg shadow-md p-6" style="width: 100%;">
            <h2 class="text-lg font-bold">Удаление профиля</h2>
            <p class="text-sm text-gray-600">После нажатия кнопки 'Удалить профиль' все ваши данные будут безвозвратно удалены.</p>
            <button type="button" @onclick="ShowDeleteConfirmation"
                    class="mt-4 text-white px-4 py-2 rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-red-500"
                    style="background-color: black;">
                Удалить профиль
            </button>
        </div>

        <!-- Плашка окна администратора -->
        <!-- Плашка окна администратора -->
        @if (IsAdmin)
        {
            <div class="mt-10 bg-white rounded-lg shadow-md p-6" style="width: 100%;">
                <h2 class="text-lg font-bold">Окно администратора</h2>
                <p class="text-sm text-gray-600">Просмотр и управление пользователями.</p>
                <button type="button" @onclick="NavigateToAdminPanel"
                        class="mt-4 text-white px-4 py-2 rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        style="background-color: rgb(178, 146, 215);">
                    Открыть окно администратора
                </button>
            </div>
        }
        </div>
    </div>
<!-- Модальное окно подтверждения удаления -->
@if (IsDeleteDialogOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
            <h3 class="text-lg font-semibold">Вы уверены?</h3>
            <p class="mt-4 text-sm text-gray-600">Вы уверены, что хотите продолжить?</p>
            <div class="flex justify-end gap-4 mt-6">
                <button @onclick="ConfirmDelete"
                        class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                    Да
                </button>
                <button @onclick="CancelDelete"
                        class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                    Нет
                </button>
            </div>
        </div>
    </div>
}

@code {
    private User EditableUser { get; set; }
    private User OriginalUser { get; set; }
    private bool IsReadOnly { get; set; } = true;
    private string SurnameError, NameError, MiddleNameError, BirthdayError, PhoneNumberError;
    private bool IsDeleteDialogOpen = false;
    private bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = CurrentUserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/authorization");
            return;
        }

        // Проверка роли пользователя
        IsAdmin = currentUser.Role == "Administrator";

        OriginalUser = await DbContext.Users.FindAsync(currentUser.ID_User);
        EditableUser = new User
            {
                ID_User = OriginalUser.ID_User,
                Surname = OriginalUser.Surname,
                Name = OriginalUser.Name,
                MiddleName = OriginalUser.MiddleName,
                Birthday = OriginalUser.Birthday,
                PhoneNumber = OriginalUser.PhoneNumber,
                Sex = OriginalUser.Sex
            };
    }
    private void EnableEditing()
    {
        IsReadOnly = false;
    }

    private async Task SaveChanges()
    {
        ValidateAll();
        if (!string.IsNullOrWhiteSpace(SurnameError) ||
            !string.IsNullOrWhiteSpace(NameError) ||
            !string.IsNullOrWhiteSpace(BirthdayError) ||
            !string.IsNullOrWhiteSpace(PhoneNumberError))
        {
            return;
        }
        var userToUpdate = await DbContext.Users.FindAsync(EditableUser.ID_User);
        if (userToUpdate != null)
        {
            userToUpdate.Surname = EditableUser.Surname;
            userToUpdate.Name = EditableUser.Name;
            userToUpdate.MiddleName = EditableUser.MiddleName;
            userToUpdate.Birthday = EditableUser.Birthday;
            userToUpdate.PhoneNumber = EditableUser.PhoneNumber;
            userToUpdate.Sex = EditableUser.Sex;
            await DbContext.SaveChangesAsync();
            OriginalUser = new User
                {
                    ID_User = userToUpdate.ID_User,
                    Surname = userToUpdate.Surname,
                    Name = userToUpdate.Name,
                    MiddleName = userToUpdate.MiddleName,
                    Birthday = userToUpdate.Birthday,
                    PhoneNumber = userToUpdate.PhoneNumber,
                    Sex = userToUpdate.Sex
                };
            IsReadOnly = true;
        }
    }

    private void CancelChanges()
    {
        IsReadOnly = true;
        EditableUser = new User
            {
                ID_User = OriginalUser.ID_User,
                Surname = OriginalUser.Surname,
                Name = OriginalUser.Name,
                MiddleName = OriginalUser.MiddleName,
                Birthday = OriginalUser.Birthday,
                PhoneNumber = OriginalUser.PhoneNumber,
                Sex = OriginalUser.Sex
            };
        SurnameError = null;
        NameError = null;
        MiddleNameError = null;
        BirthdayError = null;
        PhoneNumberError = null;
    }

    private void NavigateToAdminPanel()
    {
        NavigationManager.NavigateTo("/admin-panel");
    }

    private async Task DeleteProfile()
    {
        var userToDelete = await DbContext.Users.FindAsync(OriginalUser.ID_User);
        if (userToDelete != null)
        {
            DbContext.Users.Remove(userToDelete);
            await DbContext.SaveChangesAsync();
            CurrentUserService.Logout();
            NavigationManager.NavigateTo("/authorization");
        }
    }

    private void ValidateAll()
    {
        ValidateSurname();
        ValidateName();
        ValidateMiddleName();
        ValidateBirthday();
        ValidatePhoneNumber();
    }

    private void ValidateSurname()
    {
        if (!string.IsNullOrWhiteSpace(EditableUser.Surname) && (!char.IsUpper(EditableUser.Surname[0]) || !EditableUser.Surname.All(char.IsLetter)))
        {
            SurnameError = "Фамилия должна начинаться с заглавной буквы и содержать только буквы.";
        }
        else
        {
            SurnameError = null;
        }
    }

    private void ValidateName()
    {
        if (!string.IsNullOrWhiteSpace(EditableUser.Name) && (EditableUser.Name.Length < 2 || !char.IsUpper(EditableUser.Name[0]) || !EditableUser.Name.All(char.IsLetter)))
        {
            NameError = "Имя должно начинаться с заглавной буквы, содержать только буквы и быть не менее 2 символов.";
        }
        else
        {
            NameError = null;
        }
    }

    private void ValidateMiddleName()
    {
        if (!string.IsNullOrWhiteSpace(EditableUser.MiddleName) && !EditableUser.MiddleName.All(char.IsLetter))
        {
            MiddleNameError = "Отчество может быть пустым или содержать только буквы.";
        }
        else
        {
            MiddleNameError = null;
        }
    }

    private void ValidateBirthday()
    {
        if (EditableUser.Birthday.HasValue)
        {
            var age = DateTime.Now.Year - EditableUser.Birthday.Value.Year;
            if (age > 122 || EditableUser.Birthday > DateTime.Now)
            {
                BirthdayError = "Некорректная дата рождения. Максимальный возраст - 122 года.";
            }
            else
            {
                BirthdayError = null;
            }
        }
        else
        {
            BirthdayError = null;
        }
    }

    private void ValidatePhoneNumber()
    {
        if (!string.IsNullOrWhiteSpace(EditableUser.PhoneNumber) &&
            (EditableUser.PhoneNumber.Length != 12 || !EditableUser.PhoneNumber.All(c => char.IsDigit(c) || c == '+')))
        {
            PhoneNumberError = "Телефон должен содержать ровно 12 символов, только цифры и символ '+'.";
        }
        else
        {
            PhoneNumberError = null;
        }
    }

    private void ShowDeleteConfirmation()
    {
        IsDeleteDialogOpen = true;
    }

    private void CancelDelete()
    {
        IsDeleteDialogOpen = false;
    }

    private async Task ConfirmDelete()
    {
        IsDeleteDialogOpen = false;
        var userToDelete = await DbContext.Users.FindAsync(OriginalUser.ID_User);
        if (userToDelete != null)
        {
            DbContext.Users.Remove(userToDelete);
            await DbContext.SaveChangesAsync();
            CurrentUserService.Logout();
            NavigationManager.NavigateTo("/authorization");
        }
    }



}
