@page "/add-question/{ID_Test:int}"

@inject MIContext DbContext
@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization

<div class="container relative" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 50px; min-height: 100vh;">
    <button @onclick="NavigateToEducation"
            class="absolute text-gray-500 hover:text-gray-700 text-xl"
            style="top: 20px; right: 20px; font-size: 60px;">
        &times;
    </button>

    <h2 class="text-lg font-semibold text-gray-800" style="font-size: 50px; margin-bottom: 40px;">
        Создание вопроса
    </h2>

    @if (SelectedTest != null)
    {
        <div style="margin-bottom: 20px;">
            <label for="questionText" class="block text-gray-700 text-lg font-medium">Текст вопроса:</label>
            <textarea id="questionText" @bind="QuestionText" class="border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
        </div>

        <div style="margin-bottom: 20px;">
            <label for="answerText" class="block text-gray-700 text-lg font-medium">Текст ответа:</label>
            <input type="text" @bind="NewAnswerText" class="border rounded w-full py-2 px-3 text-gray-700" />
        </div>

        <div style="margin-bottom: 20px;">
            <label class="text-gray-700 text-lg font-medium">Правильный ответ:</label>
            <input type="checkbox" @bind="IsCorrectAnswer" />
        </div>

        <div style="margin-bottom: 20px;">
            <button @onclick="CreateAnswer"
                    class="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400"
                    disabled="@string.IsNullOrWhiteSpace(NewAnswerText)">
                Создать ответ
            </button>
        </div>

        <h3 class="text-lg font-semibold text-gray-800">Добавленные ответы</h3>
        @foreach (var answer in Answers)
        {
            <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 10px;">
                <span class="font-bold">@($"{Answers.IndexOf(answer) + 1}.")</span>
                <input type="text" @bind="answer.Text" class="border rounded w-full py-2 px-3 text-gray-700" />
                <label class="ml-2">Правильный ответ:</label>
                <input type="checkbox" @bind="answer.Correct" />
                <button @onclick="(() => RemoveAnswer(answer))"
                        class="bg-red-500 text-white px-2 py-1 rounded-md hover:bg-red-600">
                    Удалить
                </button>
            </div>
        }

        <button @onclick="CreatesQuestion"
                class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
            Создать вопрос
        </button>
    }
</div>

@if (IsModalOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
            <h3 class="text-lg font-semibold">@ModalMessage</h3>
            <div class="flex justify-end gap-4 mt-6">
                <button @onclick="CloseModal"
                        class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string QuestionText;
    private string NewAnswerText;
    private bool IsCorrectAnswer;
    private List<Answer> Answers = new List<Answer>();
    private int? SelectedTest { get; set; }
    private bool IsModalOpen = false;
    private string ModalMessage = string.Empty;

    [Parameter] public int ID_Test { get; set; }

    protected override void OnInitialized()
    {
        SelectedTest = ID_Test;
    }

    private void CreateAnswer()
    {
        if (string.IsNullOrWhiteSpace(NewAnswerText)) return;

        var newAnswer = new Answer
            {
                Text = NewAnswerText,
                Correct = IsCorrectAnswer
            };

        Answers.Add(newAnswer);

        NewAnswerText = string.Empty;
        IsCorrectAnswer = false;

        StateHasChanged();
    }

    private void RemoveAnswer(Answer answer)
    {
        Answers.Remove(answer);
        StateHasChanged();
    }

    private async Task CreatesQuestion()
    {
        if (string.IsNullOrWhiteSpace(QuestionText))
        {
            ModalMessage = "Заполните текст вопроса.";
            IsModalOpen = true;
            return;
        }

        if (Answers.Any(a => string.IsNullOrWhiteSpace(a.Text)))
        {
            ModalMessage = "Заполните текст для каждого ответа.";
            IsModalOpen = true;
            return;
        }

        var newQuestion = new Question
            {
                Text = QuestionText,
                ID_Test = SelectedTest ?? ID_Test
            };

        DbContext.Questions.Add(newQuestion);
        await DbContext.SaveChangesAsync();

        foreach (var answer in Answers)
        {
            var newAnswer = new Answer
                {
                    Text = answer.Text,
                    Correct = answer.Correct,
                    ID_Question = newQuestion.ID_Question
                };

            DbContext.Answers.Add(newAnswer);
        }

        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/education");
    }

    private void CloseModal() => IsModalOpen = false;

    private void NavigateToEducation() => NavigationManager.NavigateTo("/education");
}
