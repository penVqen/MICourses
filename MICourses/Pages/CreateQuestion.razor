@page "/create-question/{ID_Test:int}"

@inject MIContext DbContext
@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization

<div class="container relative" style="max-width: calc(100% - 800px); margin: auto; padding: 20px; margin-top: 50px; min-height: 100vh;">
    <button @onclick="NavigateToEducation"
            class="absolute text-gray-500 hover:text-gray-700 text-xl"
            style="top: 20px; right: 20px; font-size: 60px;">
        &times;
    </button>

    <h2 class="text-lg font-semibold text-gray-800" style="font-size: 50px; margin-bottom: 40px;">
        Создание вопроса
    </h2>

    <div style="margin-bottom: 20px;">
        <label class="block text-gray-700 text-lg font-medium">Тест:</label>
        <select @onchange="LoadTestsForCourse" class="border rounded w-full py-2 px-3 text-gray-700">
            <option value="" disabled selected>Выберите тест</option>
            @foreach (var test in ExistingTests)
            {
                <option value="@test.ID_Test">@test.Name</option>
            }
        </select>
    </div>

    @if (SelectedTest != null)
    {
        <div style="margin-bottom: 20px;">
            <label for="questionText" class="block text-gray-700 text-lg font-medium">Текст вопроса:</label>
            <textarea id="questionText" @bind="QuestionText" class="border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
        </div>

        <div style="margin-bottom: 20px;">
            <label for="answers" class="block text-gray-700 text-lg font-medium">Ответы:</label>
            @for (int i = 0; i < Answers.Count; i++)
            {
                <div style="margin-bottom: 10px;">
                    <input type="text" @bind="Answers[i].Text" class="border rounded w-full py-2 px-3 text-gray-700" placeholder="Ответ" />
                    <input type="checkbox" @bind="Answers[i].Correct" class="ml-2" /> Верный ответ
                </div>
            }
            <button @onclick="AddAnswer" class="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                Добавить ответ
            </button>
        </div>

        <button @onclick="CreatesQuestion" class="bg-purple-500 text-white px-6 py-2 rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-300">
            Создать вопрос
        </button>
    }
</div>

@if (IsModalOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-1/3">
            <h3 class="text-lg font-semibold">@ModalMessage</h3>
            <div class="flex justify-end gap-4 mt-6">
                <button @onclick="CloseModal"
                        class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string QuestionText;
    private List<Answer> Answers = new List<Answer> { new Answer() };  // Изначально один пустой ответ
    private int? SelectedTest { get; set; }
    private List<Test> ExistingTests = new List<Test>();
    private bool IsModalOpen = false;
    private string ModalMessage = string.Empty;

    [Parameter] public int ID_Test { get; set; }  // Параметр ID_Test из URL

    protected override async Task OnInitializedAsync()
    {
        var currentUser = CurrentUserService.GetCurrentUser();
        if (currentUser == null)
        {
            ModalMessage = "Пользователь не авторизован";
            IsModalOpen = true;
        }
        else
        {
            // Исправляем использование DbContext для загрузки тестов
            ExistingTests = await MICourses.Models.Test.ToListAsync();  // Здесь использован DbContext.Tests

            // Загрузим тест по ID_Test, если он передан в URL
            if (ID_Test > 0)
            {
                SelectedTest = ID_Test;
            }
        }
    }


    private void CloseModal() => IsModalOpen = false;

    private async Task LoadTestsForCourse(ChangeEventArgs e)
    {
        SelectedTest = e.Value != null ? int.Parse(e.Value.ToString()) : (int?)null;
    }

    private void AddAnswer()
    {
        Answers.Add(new Answer());  // Добавляем новый пустой ответ
    }

    private async Task CreatesQuestion()
    {
        if (string.IsNullOrWhiteSpace(QuestionText) || SelectedTest == null || !Answers.Any(a => a.Correct))
        {
            ModalMessage = "Заполните все поля и выберите верный ответ";
            IsModalOpen = true;
            return;
        }

        var newQuestion = new Question
        {
            Text = QuestionText,
            ID_Test = SelectedTest.Value
        };

        DbContext.Questions.Add(newQuestion);
        await DbContext.SaveChangesAsync();

        foreach (var answer in Answers)
        {
            var newAnswer = new Answer
            {
                Text = answer.Text,
                Correct = answer.Correct,
                ID_Question = newQuestion.ID_Question
            };

            DbContext.Answers.Add(newAnswer);
        }

        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/education");
    }

    private void NavigateToEducation() => NavigationManager.NavigateTo("/education");
}
